openapi: 3.0.0
info:
  description: |
    Open API document for InNon-Formal.edu App Project
  version: "1.0.0"
  title: InNon-Formal.edu
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license: 
    name: Apache 2.0 
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: Base URL Server AWS
    url: http://192.168.10.1:8080
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/YUSNARSETIYADI150403_1/InNon-Formal.edu-App-Project/1.0.0
  - description: Domain
    url: https://example.my.id
    variables:
      environment:
        default: dev
        enum:
          - "dev"
          - "prod"
tags:
  - name: Auth
    description:  Manage fitur Auth
  - name: Super-Admin
    description:  Manage fitur Super-Admin
  - name: School-Administrator
    description: Manage fitur School-Administrator
  - name: Teacher
    description: Manage fitur Teacher
  - name: Student
    description: Manage fitur Student
  - name: Class
    description:  Manage fitur Class
  - name: Join-Class
    description:  Manage fitur Join-Class
  - name: Raport
    description: Manage Fitur Raport
  - name: Feedback
    description: Manage Fitur Feedback
  - name: Contract
    description: Manage Fitur Contract  


paths:

### Endpoint Auth
  /login:
    post:
      summary: "Login"
      description: "Login for Super-Admin/School-Administrator/Teacher/Student"
      tags:
      - "Auth"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                "email":
                  type: string
                "password":
                  type: string
            example:
              email: "budi123@gmail.com"
              password: "123"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                status: "Success"
                message: "Login Success"
                data:
                  id: 1
                  name: "Budiman"
                  email: "budi123@gmail.com"
                  role: "Admin"
                  user_role_id: 1
                  agency_code: "123"
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2NzAwMzYwMjcsInJvbGUiOiJ1c2VyIiwidXNlcklkIjoxfQ.pT-FmSraUUb8HY73ofYbbt3vFgbej0XaHP9VMas8Q44"

        "400" :
          $ref : "#/components/responses/400"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"   


### Endpoint Super-Admin
  /super-admins:
    post:
      tags:
        - Super-Admin
      summary: "Coming soon Open API"
      description: "Register User with Role = User."
      requestBody:
        required: true
        content:
          application/json:
            # schema:
              # $ref: "#/components/schemas/InsertUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '201':
          description: "Success Create User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "User successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - Super-Admin
      summary: "Coming soon Open API"
      description: "Get all users and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "nama user"
          required: false
          in: query
          schema:
            type: string
            example: "budiman"
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              # schema:
              #   $ref: "#/components/schemas/SuccesArrayUserResult"
              example:
                  status: "Success"
                  message: "Success get all users"
                  data:
                    - id: 1
                      full_name: "Budiman"
                      email: "budi123@gmail.com"
                      team: "Academic"
                      role: "User"
                      status: "Active" 
                    - id: 2
                      full_name: "Jasiman"
                      email: "Jasiman123@gmail.com"
                      team: "Academic"
                      role: "Admin"
                      status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /super-admins/{id}:
    get:
      tags:
        - Super-Admin
      summary: "Coming soon Open API"
      description: "Get data user using id user at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to get data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Get User by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get User by Id"
                  data:
                    id: 1
                    full_name: "Jasiman"
                    email: "Jasiman123@gmail.com"
                    team: "Academic"
                    role: "User"
                    status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Super-Admin
      summary: "Coming soon Open API"
      description: "Update User using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to update data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            # schema:
                # $ref: "#/components/schemas/EditUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '200':
          description: "Success update User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update user."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Super-Admin
      summary: "Coming soon Open API"
      description: "Delete User using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to delete data."
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete User."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete user"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"


### Endpoint School-Administrator
  /school-administrators:
    post:
      tags:
        - School-Administrator
      summary: "Coming soon Open API"
      description: "Register User with Role = User."
      requestBody:
        required: true
        content:
          application/json:
            # schema:
              # $ref: "#/components/schemas/InsertUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '201':
          description: "Success Create User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "User successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - School-Administrator
      summary: "Coming soon Open API"
      description: "Get all users and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "nama user"
          required: false
          in: query
          schema:
            type: string
            example: "budiman"
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              # schema:
              #   $ref: "#/components/schemas/SuccesArrayUserResult"
              example:
                  status: "Success"
                  message: "Success get all users"
                  data:
                    - id: 1
                      full_name: "Budiman"
                      email: "budi123@gmail.com"
                      team: "Academic"
                      role: "User"
                      status: "Active" 
                    - id: 2
                      full_name: "Jasiman"
                      email: "Jasiman123@gmail.com"
                      team: "Academic"
                      role: "Admin"
                      status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /school-administrators/{id}:
    get:
      tags:
        - School-Administrator
      summary: "Coming soon Open API"
      description: "Get data user using id user at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to get data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Get User by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get User by Id"
                  data:
                    id: 1
                    full_name: "Jasiman"
                    email: "Jasiman123@gmail.com"
                    team: "Academic"
                    role: "User"
                    status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - School-Administrator
      summary: "Coming soon Open API"
      description: "Update User using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to update data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            # schema:
                # $ref: "#/components/schemas/EditUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '200':
          description: "Success update User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update user."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - School-Administrator
      summary: "Coming soon Open API"
      description: "Delete User using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to delete data."
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete User."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete user"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"


# Endpoint Teacher
  /teachers:
    post:
      tags:
        - Teacher
      summary: "Coming soon Open API"
      description: "Register User with Role = User."
      requestBody:
        required: true
        content:
          application/json:
            # schema:
              # $ref: "#/components/schemas/InsertUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '201':
          description: "Success Create User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "User successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - Teacher
      summary: "Coming soon Open API"
      description: "Get all users and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "nama user"
          required: false
          in: query
          schema:
            type: string
            example: "budiman"
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              # schema:
              #   $ref: "#/components/schemas/SuccesArrayUserResult"
              example:
                  status: "Success"
                  message: "Success get all users"
                  data:
                    - id: 1
                      full_name: "Budiman"
                      email: "budi123@gmail.com"
                      team: "Academic"
                      role: "User"
                      status: "Active" 
                    - id: 2
                      full_name: "Jasiman"
                      email: "Jasiman123@gmail.com"
                      team: "Academic"
                      role: "Admin"
                      status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /teachers/{id}:
    get:
      tags:
        - Teacher
      summary: "Coming soon Open API"
      description: "Get data user using id user at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to get data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Get User by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get User by Id"
                  data:
                    id: 1
                    full_name: "Jasiman"
                    email: "Jasiman123@gmail.com"
                    team: "Academic"
                    role: "User"
                    status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Teacher
      summary: "Coming soon Open API"
      description: "Update User using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to update data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            # schema:
                # $ref: "#/components/schemas/EditUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '200':
          description: "Success update User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update user."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Teacher
      summary: "Coming soon Open API"
      description: "Delete User using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to delete data."
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete User."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete user"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"


# Endpoint Student
  /students:
    post:
      tags:
        - Student
      summary: "Coming soon Open API"
      description: "Register User with Role = User."
      requestBody:
        required: true
        content:
          application/json:
            # schema:
              # $ref: "#/components/schemas/InsertUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '201':
          description: "Success Create User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "User successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - Student
      summary: "Coming soon Open API"
      description: "Get all users and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "nama user"
          required: false
          in: query
          schema:
            type: string
            example: "budiman"
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              # schema:
              #   $ref: "#/components/schemas/SuccesArrayUserResult"
              example:
                  status: "Success"
                  message: "Success get all users"
                  data:
                    - id: 1
                      full_name: "Budiman"
                      email: "budi123@gmail.com"
                      team: "Academic"
                      role: "User"
                      status: "Active" 
                    - id: 2
                      full_name: "Jasiman"
                      email: "Jasiman123@gmail.com"
                      team: "Academic"
                      role: "Admin"
                      status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /students/{id}:
    get:
      tags:
        - Student
      summary: "Coming soon Open API"
      description: "Get data user using id user at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to get data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Get User by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get User by Id"
                  data:
                    id: 1
                    full_name: "Jasiman"
                    email: "Jasiman123@gmail.com"
                    team: "Academic"
                    role: "User"
                    status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Student
      summary: "Coming soon Open API"
      description: "Update User using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to update data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            # schema:
                # $ref: "#/components/schemas/EditUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '200':
          description: "Success update User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update user."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Student
      summary: "Coming soon Open API"
      description: "Delete User using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to delete data."
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete User."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete user"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"


### Endpoint Class
  /classes:
    post:
      tags:
        - Class
      summary: "Coming soon Open API"
      description: "Register User with Role = User."
      requestBody:
        required: true
        content:
          application/json:
            # schema:
              # $ref: "#/components/schemas/InsertUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '201':
          description: "Success Create User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "User successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - Class
      summary: "Coming soon Open API"
      description: "Get all users and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "nama user"
          required: false
          in: query
          schema:
            type: string
            example: "budiman"
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              # schema:
              #   $ref: "#/components/schemas/SuccesArrayUserResult"
              example:
                  status: "Success"
                  message: "Success get all users"
                  data:
                    - id: 1
                      full_name: "Budiman"
                      email: "budi123@gmail.com"
                      team: "Academic"
                      role: "User"
                      status: "Active" 
                    - id: 2
                      full_name: "Jasiman"
                      email: "Jasiman123@gmail.com"
                      team: "Academic"
                      role: "Admin"
                      status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /classes/{id}:
    get:
      tags:
        - Class
      summary: "Coming soon Open API"
      description: "Get data user using id user at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to get data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Get User by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get User by Id"
                  data:
                    id: 1
                    full_name: "Jasiman"
                    email: "Jasiman123@gmail.com"
                    team: "Academic"
                    role: "User"
                    status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Class
      summary: "Coming soon Open API"
      description: "Update User using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to update data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            # schema:
                # $ref: "#/components/schemas/EditUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '200':
          description: "Success update User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update user."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Class
      summary: "Coming soon Open API"
      description: "Delete User using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to delete data."
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete User."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete user"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"


### Endpoint Join-Class
  /join-classes:
    post:
      tags:
        - Join-Class
      summary: "Coming soon Open API"
      description: "Register User with Role = User."
      requestBody:
        required: true
        content:
          application/json:
            # schema:
              # $ref: "#/components/schemas/InsertUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '201':
          description: "Success Create User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "User successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - Join-Class
      summary: "Coming soon Open API"
      description: "Get all users and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "nama user"
          required: false
          in: query
          schema:
            type: string
            example: "budiman"
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              # schema:
              #   $ref: "#/components/schemas/SuccesArrayUserResult"
              example:
                  status: "Success"
                  message: "Success get all users"
                  data:
                    - id: 1
                      full_name: "Budiman"
                      email: "budi123@gmail.com"
                      team: "Academic"
                      role: "User"
                      status: "Active" 
                    - id: 2
                      full_name: "Jasiman"
                      email: "Jasiman123@gmail.com"
                      team: "Academic"
                      role: "Admin"
                      status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /join-classes/{id}:
    get:
      tags:
        - Join-Class
      summary: "Coming soon Open API"
      description: "Get data user using id user at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to get data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Get User by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get User by Id"
                  data:
                    id: 1
                    full_name: "Jasiman"
                    email: "Jasiman123@gmail.com"
                    team: "Academic"
                    role: "User"
                    status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Join-Class
      summary: "Coming soon Open API"
      description: "Update User using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to update data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            # schema:
                # $ref: "#/components/schemas/EditUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '200':
          description: "Success update User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update user."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Join-Class
      summary: "Coming soon Open API"
      description: "Delete User using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to delete data."
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete User."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete user"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"


### Endpoint Raport
  /raports:
    post:
      tags:
        - Raport
      summary: "Coming soon Open API"
      description: "Register User with Role = User."
      requestBody:
        required: true
        content:
          application/json:
            # schema:
              # $ref: "#/components/schemas/InsertUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '201':
          description: "Success Create User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "User successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - Raport
      summary: "Coming soon Open API"
      description: "Get all users and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "nama user"
          required: false
          in: query
          schema:
            type: string
            example: "budiman"
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              # schema:
              #   $ref: "#/components/schemas/SuccesArrayUserResult"
              example:
                  status: "Success"
                  message: "Success get all users"
                  data:
                    - id: 1
                      full_name: "Budiman"
                      email: "budi123@gmail.com"
                      team: "Academic"
                      role: "User"
                      status: "Active" 
                    - id: 2
                      full_name: "Jasiman"
                      email: "Jasiman123@gmail.com"
                      team: "Academic"
                      role: "Admin"
                      status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /raports/{id}:
    get:
      tags:
        - Raport
      summary: "Coming soon Open API"
      description: "Get data user using id user at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to get data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Get User by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get User by Id"
                  data:
                    id: 1
                    full_name: "Jasiman"
                    email: "Jasiman123@gmail.com"
                    team: "Academic"
                    role: "User"
                    status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Raport
      summary: "Coming soon Open API"
      description: "Update User using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to update data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            # schema:
                # $ref: "#/components/schemas/EditUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '200':
          description: "Success update User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update user."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Raport
      summary: "Coming soon Open API"
      description: "Delete User using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to delete data."
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete User."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete user"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"


### Endpoint Feedback
  /feedbacks:
    post:
      tags:
        - Feedback
      summary: "Coming soon Open API"
      description: "Register User with Role = User."
      requestBody:
        required: true
        content:
          application/json:
            # schema:
              # $ref: "#/components/schemas/InsertUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '201':
          description: "Success Create User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "User successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - Feedback
      summary: "Coming soon Open API"
      description: "Get all users and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "nama user"
          required: false
          in: query
          schema:
            type: string
            example: "budiman"
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              # schema:
              #   $ref: "#/components/schemas/SuccesArrayUserResult"
              example:
                  status: "Success"
                  message: "Success get all users"
                  data:
                    - id: 1
                      full_name: "Budiman"
                      email: "budi123@gmail.com"
                      team: "Academic"
                      role: "User"
                      status: "Active" 
                    - id: 2
                      full_name: "Jasiman"
                      email: "Jasiman123@gmail.com"
                      team: "Academic"
                      role: "Admin"
                      status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /feedbacks/{id}:
    get:
      tags:
        - Feedback
      summary: "Coming soon Open API"
      description: "Get data user using id user at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to get data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Get User by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get User by Id"
                  data:
                    id: 1
                    full_name: "Jasiman"
                    email: "Jasiman123@gmail.com"
                    team: "Academic"
                    role: "User"
                    status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Feedback
      summary: "Coming soon Open API"
      description: "Update User using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to update data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            # schema:
                # $ref: "#/components/schemas/EditUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '200':
          description: "Success update User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update user."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Feedback
      summary: "Coming soon Open API"
      description: "Delete User using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to delete data."
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete User."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete user"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"


# Endpoint Contract
  /contracts:
    post:
      tags:
        - Contract
      summary: "Coming soon Open API"
      description: "Register User with Role = User."
      requestBody:
        required: true
        content:
          application/json:
            # schema:
              # $ref: "#/components/schemas/InsertUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '201':
          description: "Success Create User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "User successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - Contract
      summary: "Coming soon Open API"
      description: "Get all users and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "nama user"
          required: false
          in: query
          schema:
            type: string
            example: "budiman"
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              # schema:
              #   $ref: "#/components/schemas/SuccesArrayUserResult"
              example:
                  status: "Success"
                  message: "Success get all users"
                  data:
                    - id: 1
                      full_name: "Budiman"
                      email: "budi123@gmail.com"
                      team: "Academic"
                      role: "User"
                      status: "Active" 
                    - id: 2
                      full_name: "Jasiman"
                      email: "Jasiman123@gmail.com"
                      team: "Academic"
                      role: "Admin"
                      status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /contracts/{id}:
    get:
      tags:
        - Contract
      summary: "Coming soon Open API"
      description: "Get data user using id user at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to get data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Get User by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get User by Id"
                  data:
                    id: 1
                    full_name: "Jasiman"
                    email: "Jasiman123@gmail.com"
                    team: "Academic"
                    role: "User"
                    status: "Active" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Contract
      summary: "Coming soon Open API"
      description: "Update User using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to update data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            # schema:
                # $ref: "#/components/schemas/EditUserObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
              team: "Academic"
              status: "Active" 
      responses:
        '200':
          description: "Success update User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update user."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Contract
      summary: "Coming soon Open API"
      description: "Delete User using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to delete data."
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete User."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete user"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"


####################################
#  COMPONENTS
####################################
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Token that generate after login."

  schemas:

### Other Schemas
    "ResponseWithoutData":
      type: object
      properties:
        status:
          type: string
        message:
          type: string
    "ResponseWithData":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: object

### Responses Schemas
  responses:
    '200':
      description: "Success Process Data"
      content:
        application/json:
          schema:
            type: object
            properties:
              message: 
                type: string
              data:
                type: object
    '201':
      description: "Success Create Data"
      content:
        application/json:
          schema:
            type: object
            properties:
              message: 
                type: string
              data:
                type: object
    '400':
      description: "Wrong Request From User"
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. Please check your input."
    '401':
      description: "Authorization information is missing or invalid."
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. User not authorized for this request."
    '404':
      description: "Page not found or wrong url. Please check again."
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. User not authorized for this request."
    '500':
      description: "Error process on server"
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. Please check server."
